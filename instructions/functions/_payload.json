[{"data":1,"prerenderedAt":69},["ShallowReactive",2],{"search-api":3},[4,11,22,30,39,51,61],{"id":5,"path":6,"dir":7,"title":8,"description":7,"keywords":9,"body":10},"content:0.index.md","/","","Home",[],"     Documentation of BI   Bi is the best language      Inspired by C   Binary   Your brain  will explode with Bi   Assembly  will be easy",{"id":12,"path":13,"dir":14,"title":15,"description":7,"keywords":16,"body":21},"content:1.introduction:1.getting-started.md","/introduction/getting-started","introduction","Getting Started",[17,18,19,20],"Prerequisites","Install the Compiler","Test if Everything is Okay","WARNING","  Getting Started  Prerequisites  To start, you need to install Python and use Linux.  Install the Compiler  To install the compiler, you have two choices:   Clone the   GitHub repository .  Go to the   GitHub repository  and copy the code into your   .py  file.  Test if Everything is Okay  Once you have installed the compiler, create a   .bi  file and add the following content:   000 0000000 {\n    0110 n0\n}\n  When you are finished, save and exit the file. Then, open a terminal and run:    ./compilateur.py [yourbifile.bi]\n   python3 compilateur.py [yourbifile.bi]\n  If the compilation is successful, you can simply run ./a.out. If nothing happens, it means everything is working!  WARNING  If you really want to learn this language, I recommend learning C first, as my language is very similar to C.  Additionally, there are many more tutorials available in C compared to BI.",{"id":23,"path":24,"dir":14,"title":25,"description":26,"keywords":27,"body":29},"content:1.introduction:2.explanation.md","/introduction/explanation","Explanation","Here, I will explain to you the first code we have done.",[28,20],"The code","  Explanation  Here, I will explain to you the first code we have done.  The code   000 0000000 {\n    0110 n0\n}\n  So, we have a few things to say. First,   000 0000000  is the declaration of the main function. In C, it is:   int main() .  Next, we have   0110 n0 .   0110  = return and   n0  = 0, so in C:   return 0; .  And the program is finished!  WARNING  All code MUST BE INSIDE a function, you can't write code ouside functions",{"id":31,"path":32,"dir":14,"title":33,"description":7,"keywords":34,"body":38},"content:1.introduction:3.hello-word.md","/introduction/hello-word","Hello Word !",[35,36,37],"Why hello word ?","How do Hello Word ?","Complete Program","  Hello Word !  Why hello word ?  Hello word is always the first stape of learn programming language, so why do otherwise ?  How do Hello Word ?  In   C , we have to way to do \"Hello word !\", in general, people do :   printf(\"Hello Word !\");  But, we can do   write(1, \"Hello Word !\", 12);  The secondary way is linked to the assembly language and the   printf  function, which is an upgrade of   write .  In   Bi , we have only one way to write \"Hello World!\", which is   0100 \"Hello World!\" .  At this point, you understand that in   Bi  we don't have parentheses or semicolons.  Complete Program  So, if you want to write \"Hello World!\" without bugs, you need to write:   000 0000000 {\n    0100 \"Hello Word !\"\n    0110 n0\n}\n",{"id":40,"path":41,"dir":42,"title":43,"description":7,"keywords":44,"body":50},"content:2.instructions:1.variable.md","/instructions/variable","instructions","Variable and number",[45,46,47,48,49],"Type","How use type in Bi ?","Declaration","Logical Operations","Number","  Variable and number  Type  In   Bi , we have 4 type of variable,   INT ,   CHAR ,   CHAR *(STR)  and   VOID   INT  =   INTEGER   CHAR  =   CHARACTER   CHAR *  =   STRING   VOID  =   VOID , it's generally for function who return nothing  How use type in Bi ?  In   C , you need write   int varname [= ...]; , in   Bi , is the same thing but with   0  and   1   INT  =   000   CHAR  =   001   CHAR *  =   100   VOID  =   101  Declaration  In   Bi , you have big restriction in the name and the number of variable because, you have utmost 64 variable name  Indeed, in   Bi , variable names are a combination of six   0  and   1 . They start at   000000  and end at   111111 .  So, if you want to make an integer variable that equals 5, you will write   000 000000 00101 n101 .  If you have correctly read the instructions, I write   n101  to represent 5. Why? It's because in   Bi  you can't write numbers in base 10.  You need to write them in base 2 and you need to write   n  before to announce to the program that the next 1s and 0s will be numbers.  Logical Operations  In all programming languages, we have logical operations with   + ,   - ,   / ,   % , and   * .  In   Bi , it is exactly the same but with   0  and   1 :    +  =>   00000  (5x0)   -  =>   00001  (4x0 + 1x1)   *  =>   00010  (3x0 + 1x1 + 1x0)   /  =>   00011  (3x0 + 2x1)   %  =>   00100  (2x0 + 1x1 + 2x0)   =  =>   00101  (2x0 + 1x1 + 1x0 + 1x1)   +=  =>   01110  (1x0 + 3x1 + 1x0)   -=  =>   01111  (1x0 + 4x1)   *=  =>   10000  (1x1 + 4x0)   /=  =>   10001  (1x1 + 3x0 + 1x1)   %=  =>   10010  (1x1 + 2x0 + 1x1 + 1x0)   ++  =>   10011  (1x1 + 2x0 + 2x1)   --  =>   10100  (1x1 + 1x0 + 1x1 + 2x0)  Number  Like i said before, for write number in   Bi , you need to write him in base 2, so how convert number in base 2 ?  To do this, you have two method, the first is easy, you go to google and you search a base convator  Or, you can convert manually and you have to way for this  The first way is count on your hands :   Or you can do this for big number : ",{"id":52,"path":53,"dir":42,"title":54,"description":7,"keywords":55,"body":60},"content:2.instructions:2.conditionAndLoop.md","/instructions/conditionandloop","Condition and loop",[56,57,58,59],"If and else","For","While","Logical operator","  Condition and loop  If and else  To make if instruction in   Bi , it's easy, you just need to write   0000 condition  And for else, you need write   0001  Exemple   000 0000000 {\n    0000 n1 00110 n0 {\n        0100 \"1 = 0\"\n    } 0001 {\n        0100 \"1 != 0\"\n    }\n    0110 n0\n}\n  Here, we verify if   1 = 0 , we know this condition is false so the result print is   \"1 != 0\"  For  In   Bi , the loop   for  is almost same that in   C  for declare loop for, you need to write :   0010 var 00101 number ; condition for stop ; step  Exemple  I want make a loop who write the first 100 integer, i write :   000 0000000 {\n    0010 000000 00101 n0 ; 000000 01001 n1100100 ; 000000 10011 {\n        0100 \"Value : \" 000000 \"\"\n    }\n    0110 n0\n}\n  So, 0010 corresponds to for, 000000 is a variable that is declared only for the loop (in C, you can declare the variable before to save the value when the loop finishes, but in Bi, it is impossible). After, we have 00101 for \"equals\" and n0 for 0.  After the first semicolon, we have the condition. Here, we check if the variable 000000 is less than n1100100, which equals 100. After the second semicolon, we have the step, so 000000 10011 signifies var 000000++, meaning we have a step of one.  While  While is exactly the same as in C but without parentheses.  Logical operator  Now, i will give you, all logical operator for condition    ==  =>   00110  (2x0 + 2x1 + 1x0)   !=  =>   00111  (2x0 + 3x1)   >  =>   01000  (1x0 + 1x1 + 3x0)   \u003C  =>   01001  (1x0 + 1x1 + 2x0 + 1x1)   >=  =>   01010  (1x0 + 1x1 + 1x0 + 1x1 + 1x0)   \u003C=  =>   01011  (1x0 + 1x1 + 1x0 + 2x1)   &&  =>   01100  (1x0 + 2x1 + 2x0)   ||  =>   01101  (1x0 + 2x1 + 1x0 + 1x1)",{"id":62,"path":63,"dir":42,"title":64,"description":65,"keywords":66,"body":68},"content:2.instructions:3.functions.md","/instructions/functions","Functions","In Bi, function work same than C",[67],"Exemple","  Functions  In   Bi , function work same than   C   BUT  like variable, in   Bi  for name function, you need to write a composition of 7   0  and   1  So you have utmost 128 function per programs  Exemple  For exemple the main function   000 0000000 {\n    0110 n0\n}\n  You must create a main function else, the program will don't work  But you can create other function and give parameters, for exemple, a function who add two numbers :   000 0000001 000 000000 000 000001 {\n    0110 000000 00000 000001\n}\n\n000 0000000 {\n    000 000000 00101 n11010\n\n    0100 \"\" 000000 \" + 2 = \" 0000001 000000 n10 \"\"\n    0110 n0\n}\n  Here, we declare the function   0000001  who take two parameters   000000  and   000001  who are integer  And we call the function in the print",1723539615128]